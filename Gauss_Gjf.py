###########################################################################################################################
#Developer: Ben Payton
#Date Created: 2024-03-10
#Last Edited: 2024-03-10
###########################################################################################################################

class GJFFile:
	def __init__(self,name):
		self.Name = name
		self.List_Format = []
		self.chk = "%chk=" + self.Name[0:-4] + ".chk"
		self.mem = "%mem=1GB"
		self.nproc = "%nprocshared=36"
		self.Input_Line = ""
		self.Title = ""
		self.Charge = None
		self.Mult = None
		self.Atom_List = []


		self.file_list()
		self.org_data()

######################################################################################################################################################################################
# opens up a named file and puts it in list format
# Note: must be passed the name of the file without ".gjf" at the end
######################################################################################################################################################################################

	def file_list(self):
		f = open(self.Name,"r")
		for i in f:
			self.List_Format.append(i)
		f.close()

######################################################################################################################################################################################
#Takes the list formatted file and organizes its infromation in to the datastructure parameters
######################################################################################################################################################################################

	def org_data(self):
		space_iter = 0
		atom_iter = 0
		HashCheck = False

		for i in self.List_Format:

			if i == "\n" and self.Input_Line != "":
				space_iter = space_iter + 1
			if i[0] == "#":
				HashCheck = True

			if HashCheck == True and i != "\n":
				self.Input_Line = self.Input_Line + i
			else:
				HashCheck = False


			if space_iter == 1 and i != "\n":
				self.Title = self.Title + i
			if space_iter == 2 and i != "\n":
				if atom_iter == 0:
					self.Charge = int(i[0])
					self.Mult = int(i[2])
					atom_iter = 1
				else:
					self.Atom_List.append(GAUSSATOM(i))
					atom_iter = atom_iter+1

######################################################################################################################################################################################
# if the atom is frozen it will unfreeze it.
# if the atom is unfrozen it will freeze it.
#Does this for all atoms
######################################################################################################################################################################################

	def flip_all_frozen(self):
		for i in self.Atom_List:
			i.flip_freeze()

######################################################################################################################################################################################
# makes sure all atoms are unfrozen
######################################################################################################################################################################################

	def all_unfrozen(self):
		for i in self.Atom_List:
			i.unfreeze()

######################################################################################################################################################################################
# freezes all specified atoms. the first atom starts at 1. list is space delimited.
######################################################################################################################################################################################

	def freeze_some(self,frozen_atoms):
		self.all_unfrozen()
		FAtom = frozen_atoms.split()
		for i in FAtom:
			i = int(i)
			self.Atom_List[int(i)-1].freeze()

######################################################################################################################################################################################
# changes the given input line to a new one
# input is a string
######################################################################################################################################################################################

	def Change_input_line(self,new_input_line):
		self.Input_Line = new_input_line

######################################################################################################################################################################################
# changes the given multiplicity to a new one
# input is an int
######################################################################################################################################################################################

	def Change_Mult(self,new_Mult):
		self.Mult = new_Mult

######################################################################################################################################################################################
# changes the given charge to a new one
# input is an int
######################################################################################################################################################################################

	def Change_Charge(self,new_Charge):
		self.Charge = new_Charge

######################################################################################################################################################################################
# prints the current input data above the atoms
######################################################################################################################################################################################

	def print_Current(self):
		print(self.chk)
		print(self.mem)
		print(self.nproc)
		print(self.Input_Line)
		print(self.Charge, self.Mult)

######################################################################################################################################################################################
# Makes a new GJF file after changes have been made
# Will overwrite a file if it is given the same name
######################################################################################################################################################################################

	def Make_New_File(self,name):
		self.print_Current()
		name = name
		f = open(name,"w")
		L = ["%chk="+name[0:-4]+".chk\n","%mem=1GB\n","%nprocshared=36\n","\n",self.input_line + "\n",self.Title + "\n", str(self.Charge) + " " + str(self.Mult) + "\n"]
		f.writelines(L)
		f.close()

		f = open(name,"a")
		for i in self.Atom_List:
			f.write(i.__str__() + "\n")
		f.write("\n")

